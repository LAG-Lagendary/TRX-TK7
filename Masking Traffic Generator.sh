#!/bin/bash
# Russian: –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Å–∫–∏—Ä—É—é—â–µ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ (—à—É–º–∞) —Å –ø–æ–º–æ—â—å—é trafgen.
# English: Script to generate decoy network traffic (noise) using trafgen.

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# !!! –í–ê–ñ–ù–û: –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –§–ò–ó–ò–ß–ï–°–ö–ò–ô —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, wlan0, eth0).
# !!! –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–ò–ö–û–ì–î–ê –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï VPN/TOR –ò–ù–¢–ï–†–§–ï–ô–°–´ (tun0, wg0)!
IFACE="eth0"
PORT_RANGE="10000-60000" # –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
PID_FILE="/var/run/trafgen_noise.pid"
LOG_FILE="/var/log/trafgen_noise.log"
TRAFGEN_SCRIPT_PATH="/usr/local/bin/trafgen_noise_script.txf"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ trafgen
if ! command -v trafgen &> /dev/null
then
    echo "–û—à–∏–±–∫–∞: 'trafgen' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ netsniff-ng: sudo apt install netsniff-ng"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ root
if [ "$EUID" -ne 0 ]; then
    echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ root –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é sudo."
    exit 1
fi

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ (Traffic Template File)
create_trafgen_template() {
cat <<EOF > "$TRAFGEN_SCRIPT_PATH"
# Trafgen Noise Template
# –ò–º–∏—Ç–∞—Ü–∏—è –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö UDP-–ø–∞–∫–µ—Ç–æ–≤ (DNS/VoIP/Game-like traffic)

<frame>
    # Ethernet Header (–°–ª—É—á–∞–π–Ω—ã–π MAC)
    0xcccccccccccc, rand:eth, 0x0800

    # IP Header (UDP, –°–ª—É—á–∞–π–Ω—ã–π IP)
    rand:ip(udp), rand:ip, rand:ip

    # UDP Header (–°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—Ç)
    rand:port:$PORT_RANGE, rand:port:$PORT_RANGE, rand:size(64, 512), checksum:udp

    # Payload (–°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    fill:rand(64)
</frame>
EOF
}

start_noise() {
    if [ -f "$PID_FILE" ]; then
        echo "‚ö†Ô∏è –°–µ—Ç–µ–≤–æ–π —à—É–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: $(cat $PID_FILE)). –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ."
        exit 1
    fi
    echo "üí• –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —à—É–º–∞ (trafgen) –Ω–∞ $IFACE..."

    create_trafgen_template

    # –ó–∞–ø—É—Å–∫ trafgen –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    # --dev: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, --cfs: script file, --silent: –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, --no-cpu-pin: –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –∫ CPU
    trafgen --dev "$IFACE" --cfs "$TRAFGEN_SCRIPT_PATH" --silent --no-cpu-pin > "$LOG_FILE" 2>&1 &

    echo $! > "$PID_FILE"
    echo "‚úÖ –°–µ—Ç–µ–≤–æ–π —à—É–º –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (PID: $(cat $PID_FILE)). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Wireshark."
}

stop_noise() {
    if [ ! -f "$PID_FILE" ]; then
        echo "‚ö†Ô∏è –°–µ—Ç–µ–≤–æ–π —à—É–º –Ω–µ –∑–∞–ø—É—â–µ–Ω."
        exit 1
    fi
    PID=$(cat "$PID_FILE")
    echo "üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —à—É–º–∞ (PID: $PID)..."
    kill "$PID" 2>/dev/null
    rm -f "$PID_FILE"
    rm -f "$TRAFGEN_SCRIPT_PATH" # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    echo "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ $LOG_FILE."
}

status_noise() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null; then
            echo "üü¢ –°–µ—Ç–µ–≤–æ–π —à—É–º –ê–ö–¢–ò–í–ï–ù (PID: $PID) –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ $IFACE."
            echo "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: sudo $0 stop"
            exit 0
        else
            echo "üî¥ –°–µ—Ç–µ–≤–æ–π —à—É–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (PID-—Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –º–µ—Ä—Ç–≤)."
            rm -f "$PID_FILE"
        fi
    fi
    echo "üî¥ –°–µ—Ç–µ–≤–æ–π —à—É–º –ù–ï –ê–ö–¢–ò–í–ï–ù."
}

case "$1" in
    start)
        start_noise
        ;;
    stop)
        stop_noise
        ;;
    status)
        status_noise
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: sudo $0 [start|stop|status]"
        exit 1
        ;;
esac
